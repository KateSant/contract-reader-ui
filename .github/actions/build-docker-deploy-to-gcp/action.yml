name: 'Build and deploy, parameterised'
description: 'Build and deploy, parameterised'
inputs:
  GCP_SA_KEY:
    required: true
  BRANCH:
    required: true
  SERVICE:
    required: true
  IMAGE:
    required: true
  TF_API_TOKEN:
    required: true
  ENGINE-ENDPOINT:
    required: true


runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ inputs.BRANCH }}

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ inputs.GCP_SA_KEY }}
        project_id: contract-reader

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: gcloud --quiet auth configure-docker
      shell: bash


    # Build the Docker image
    - name: Build
      run: |-
        docker build --quiet \
          --tag "gcr.io/contract-reader/${{ inputs.IMAGE }}:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
      shell: bash

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: docker push "gcr.io/contract-reader/${{ inputs.IMAGE }}:$GITHUB_SHA" --quiet
      shell: bash

    # # Deploy the image to Google Cloud Run
    # - name: Deploy
    #   run: gcloud run deploy ${{ inputs.SERVICE }} --region europe-west4 --project contract-reader --image gcr.io/contract-reader/${{ inputs.IMAGE }}:$GITHUB_SHA --platform managed
    #   shell: bash

    # Terraform the GCR service 
    

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ inputs.TF_API_TOKEN }}

    - name: Terraform Init
      working-directory: terraform
      run: terraform init
      shell: bash

    # Pass docker image name to terraform
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -var="docker-image=gcr.io/contract-reader/${{ inputs.IMAGE }}:$GITHUB_SHA" -var="service-name=${{ inputs.SERVICE }}" -var="engine-endpoint=${{ inputs.ENGINE-ENDPOINT }}" -auto-approve -input=false
      shell: bash  